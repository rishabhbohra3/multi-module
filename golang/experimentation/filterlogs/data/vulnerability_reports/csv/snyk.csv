"Dependency Name","Version","Vulnerability Name","severity","CVSSV3","publicationTime","VulnerabilityRange","FixedIn","Description"
"axios","1.5.1","Proof of Concept","high","CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:N/E:P","2023-10-25T07:24:40.876294Z","["">0.8.1 <1.6.0""]","[""1.6.0""]","## Overview
[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.

Affected versions of this package are vulnerable to Cross-site Request Forgery (CSRF) due to inserting the `X-XSRF-TOKEN` header using the secret `XSRF-TOKEN` cookie value in all requests to any server when the `XSRF-TOKEN`0 cookie is available, and the `withCredentials` setting is turned on. If a malicious user manages to obtain this value, it can potentially lead to the XSRF defence mechanism bypass.



## Workaround

Users should change the default `XSRF-TOKEN` cookie name in the Axios configuration and manually include the corresponding header only in the specific places where it's necessary.
## Remediation
Upgrade `axios` to version 1.6.0 or higher.
## References
- [GitHub Commit](https://github.com/axios/axios/commit/96ee232bd3ee4de2e657333d4d2191cd389e14d0)
- [GitHub Issue](https://github.com/axios/axios/issues/6006)
- [GitHub Issue](https://github.com/axios/axios/issues/6022)
- [GitHub PR](https://github.com/axios/axios/pull/6028)
"
"axios","0.26.1","Proof of Concept","high","CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:N/E:P","2023-10-25T07:24:40.876294Z","["">0.8.1 <1.6.0""]","[""1.6.0""]","## Overview
[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.

Affected versions of this package are vulnerable to Cross-site Request Forgery (CSRF) due to inserting the `X-XSRF-TOKEN` header using the secret `XSRF-TOKEN` cookie value in all requests to any server when the `XSRF-TOKEN`0 cookie is available, and the `withCredentials` setting is turned on. If a malicious user manages to obtain this value, it can potentially lead to the XSRF defence mechanism bypass.



## Workaround

Users should change the default `XSRF-TOKEN` cookie name in the Axios configuration and manually include the corresponding header only in the specific places where it's necessary.
## Remediation
Upgrade `axios` to version 1.6.0 or higher.
## References
- [GitHub Commit](https://github.com/axios/axios/commit/96ee232bd3ee4de2e657333d4d2191cd389e14d0)
- [GitHub Issue](https://github.com/axios/axios/issues/6006)
- [GitHub Issue](https://github.com/axios/axios/issues/6022)
- [GitHub PR](https://github.com/axios/axios/pull/6028)
"
"axios","0.26.1","Proof of Concept","high","CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:L/A:N/E:P","2023-10-25T07:24:40.876294Z","["">0.8.1 <1.6.0""]","[""1.6.0""]","## Overview
[axios](https://www.npmjs.com/package/axios) is a promise-based HTTP client for the browser and Node.js.

Affected versions of this package are vulnerable to Cross-site Request Forgery (CSRF) due to inserting the `X-XSRF-TOKEN` header using the secret `XSRF-TOKEN` cookie value in all requests to any server when the `XSRF-TOKEN`0 cookie is available, and the `withCredentials` setting is turned on. If a malicious user manages to obtain this value, it can potentially lead to the XSRF defence mechanism bypass.



## Workaround

Users should change the default `XSRF-TOKEN` cookie name in the Axios configuration and manually include the corresponding header only in the specific places where it's necessary.
## Remediation
Upgrade `axios` to version 1.6.0 or higher.
## References
- [GitHub Commit](https://github.com/axios/axios/commit/96ee232bd3ee4de2e657333d4d2191cd389e14d0)
- [GitHub Issue](https://github.com/axios/axios/issues/6006)
- [GitHub Issue](https://github.com/axios/axios/issues/6022)
- [GitHub PR](https://github.com/axios/axios/pull/6028)
"
"browserify-sign","4.2.1","Not Defined","high","CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N","2023-10-27T12:03:19.055323Z","["">=2.6.0 <4.2.2""]","[""4.2.2""]","## Overview

Affected versions of this package are vulnerable to Improper Verification of Cryptographic Signature in the `dsaVerify` function. An attacker can construct signatures that can be successfully verified by any public key, leading to a signature forgery attack. This is achieved by exploiting an upper bound check issue in the `checkValue` function, which incorrectly checks the upper bound of the passed parameters.  

**Note:**
This vulnerability affects all places in the project that involve DSA verification of user-input signatures.
## Remediation
Upgrade `browserify-sign` to version 4.2.2 or higher.
## References
- [GitHub Commit](https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30)
"
"inflight","1.0.6","Proof of Concept","medium","CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P","2023-11-30T12:52:55.469185Z","[""*""]","[]","## Overview

Affected versions of this package are vulnerable to Missing Release of Resource after Effective Lifetime via the `makeres` function due to improperly deleting keys from the `reqs` object after execution of callbacks. This behavior causes the keys to remain in the `reqs` object, which leads to resource exhaustion.

Exploiting this vulnerability results in crashing the `node` process or in the application crash.

**Note:**
This library is not maintained, and currently, there is no fix for this issue. To overcome this vulnerability, several dependent packages have eliminated the use of this library.
## PoC
```js
const inflight = require('inflight');

function testInflight() {
  let i = 0;
  function scheduleNext() {
    let key = `key-${i++}`;
    const callback = () => {
    };
    for (let j = 0; j < 1000000; j++) {
      inflight(key, callback);
    }

    setImmediate(scheduleNext);
  }


  if (i % 100 === 0) {
    console.log(process.memoryUsage());
  }

  scheduleNext();
}

testInflight();
```
## Remediation
There is no fixed version for `inflight`.
## References
- [GitHub Issue](https://github.com/isaacs/inflight/issues/5)
- [GitHub PR](https://github.com/logdna/logdna-agent/pull/157)
"
"inflight","1.0.6","Proof of Concept","medium","CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P","2023-11-30T12:52:55.469185Z","[""*""]","[]","## Overview

Affected versions of this package are vulnerable to Missing Release of Resource after Effective Lifetime via the `makeres` function due to improperly deleting keys from the `reqs` object after execution of callbacks. This behavior causes the keys to remain in the `reqs` object, which leads to resource exhaustion.

Exploiting this vulnerability results in crashing the `node` process or in the application crash.

**Note:**
This library is not maintained, and currently, there is no fix for this issue. To overcome this vulnerability, several dependent packages have eliminated the use of this library.
## PoC
```js
const inflight = require('inflight');

function testInflight() {
  let i = 0;
  function scheduleNext() {
    let key = `key-${i++}`;
    const callback = () => {
    };
    for (let j = 0; j < 1000000; j++) {
      inflight(key, callback);
    }

    setImmediate(scheduleNext);
  }


  if (i % 100 === 0) {
    console.log(process.memoryUsage());
  }

  scheduleNext();
}

testInflight();
```
## Remediation
There is no fixed version for `inflight`.
## References
- [GitHub Issue](https://github.com/isaacs/inflight/issues/5)
- [GitHub PR](https://github.com/logdna/logdna-agent/pull/157)
"
"request","2.88.2","Proof of Concept","medium","CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P","2023-03-17T07:46:44.219769Z","[""*""]","[]","## Overview
[request](https://www.npmjs.com/package/request) is a simplified http request client.

Affected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).

**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.
## Remediation
A fix was pushed into the `master` branch but not yet published.
## References
- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)
- [GitHub Issue](https://github.com/request/request/issues/3442)
- [GitHub PR](https://github.com/request/request/pull/3444)
"
"request","2.88.2","Proof of Concept","medium","CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P","2023-03-17T07:46:44.219769Z","[""*""]","[]","## Overview
[request](https://www.npmjs.com/package/request) is a simplified http request client.

Affected versions of this package are vulnerable to Server-side Request Forgery (SSRF) due to insufficient checks in the `lib/redirect.js` file by allowing insecure redirects in the default configuration, via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).

**NOTE:** `request` package has been deprecated, so a fix is not expected. See https://github.com/request/request/issues/3142.
## Remediation
A fix was pushed into the `master` branch but not yet published.
## References
- [GitHub Commit](https://github.com/request/request/commit/d42332182512e56ba68446f49c3e3711e04301a2)
- [GitHub Issue](https://github.com/request/request/issues/3442)
- [GitHub PR](https://github.com/request/request/pull/3444)
"
"tough-cookie","2.5.0","Proof of Concept","medium","CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P","2023-06-30T11:54:16.657348Z","[""<4.1.3""]","[""4.1.3""]","## Overview
[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.

Affected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.
## PoC
```
// PoC.js
async function main(){
var tough = require(""tough-cookie"");
var cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});
// Exploit cookie
await cookiejar.setCookie(
  ""Slonser=polluted; Domain=__proto__; Path=/notauth"",
  ""https://__proto__/admin""
);
// normal cookie
var cookie = await cookiejar.setCookie(
  ""Auth=Lol; Domain=google.com; Path=/notauth"",
  ""https://google.com/""
);

//Exploit cookie
var a = {};
console.log(a[""/notauth""][""Slonser""])
}
main();
```

## Details

Prototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.

There are two main ways in which the pollution of prototypes occurs:

-   Unsafe `Object` recursive merge
    
-   Property definition by path
    

### Unsafe Object recursive merge

The logic of a vulnerable recursive merge function follows the following high-level model:
```
merge (target, source)

  foreach property of source

    if property exists and is an object on both the target and the source

      merge(target[property], source[property])

    else

      target[property] = source[property]
```
<br>  

When the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.

Clone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.

`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.

### Property definition by path

There are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`

If the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.

## Types of attacks

There are a few methods by which Prototype Pollution can be manipulated:

| Type |Origin  |Short description |
|--|--|--|
| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |
 |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|
|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|

## Affected environments

The following environments are susceptible to a Prototype Pollution attack:

-   Application server
    
-   Web server

-   Web browser
    

## How to prevent

1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.
    
2.  Require schema validation of JSON input.
    
3.  Avoid using unsafe recursive merge functions.
    
4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.
    
5.  As a best practice use `Map` instead of `Object`.

### For more information on this vulnerability type:

[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)

## Remediation
Upgrade `tough-cookie` to version 4.1.3 or higher.
## References
- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)
- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)
- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)
"
"tough-cookie","2.5.0","Proof of Concept","medium","CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P","2023-06-30T11:54:16.657348Z","[""<4.1.3""]","[""4.1.3""]","## Overview
[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.

Affected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.
## PoC
```
// PoC.js
async function main(){
var tough = require(""tough-cookie"");
var cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});
// Exploit cookie
await cookiejar.setCookie(
  ""Slonser=polluted; Domain=__proto__; Path=/notauth"",
  ""https://__proto__/admin""
);
// normal cookie
var cookie = await cookiejar.setCookie(
  ""Auth=Lol; Domain=google.com; Path=/notauth"",
  ""https://google.com/""
);

//Exploit cookie
var a = {};
console.log(a[""/notauth""][""Slonser""])
}
main();
```

## Details

Prototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.

There are two main ways in which the pollution of prototypes occurs:

-   Unsafe `Object` recursive merge
    
-   Property definition by path
    

### Unsafe Object recursive merge

The logic of a vulnerable recursive merge function follows the following high-level model:
```
merge (target, source)

  foreach property of source

    if property exists and is an object on both the target and the source

      merge(target[property], source[property])

    else

      target[property] = source[property]
```
<br>  

When the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.

Clone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.

`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.

### Property definition by path

There are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`

If the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.

## Types of attacks

There are a few methods by which Prototype Pollution can be manipulated:

| Type |Origin  |Short description |
|--|--|--|
| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |
 |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|
|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|

## Affected environments

The following environments are susceptible to a Prototype Pollution attack:

-   Application server
    
-   Web server

-   Web browser
    

## How to prevent

1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.
    
2.  Require schema validation of JSON input.
    
3.  Avoid using unsafe recursive merge functions.
    
4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.
    
5.  As a best practice use `Map` instead of `Object`.

### For more information on this vulnerability type:

[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)

## Remediation
Upgrade `tough-cookie` to version 4.1.3 or higher.
## References
- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)
- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)
- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)
"
"tough-cookie","2.5.0","Proof of Concept","medium","CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N/E:P","2023-06-30T11:54:16.657348Z","[""<4.1.3""]","[""4.1.3""]","## Overview
[tough-cookie](https://www.npmjs.com/package/tough-cookie) is a RFC6265 Cookies and CookieJar module for Node.js.

Affected versions of this package are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in `rejectPublicSuffixes=false` mode. Due to an issue with the manner in which the objects are initialized, an attacker can expose or modify a limited amount of property information on those objects. There is no impact to availability.
## PoC
```
// PoC.js
async function main(){
var tough = require(""tough-cookie"");
var cookiejar = new tough.CookieJar(undefined,{rejectPublicSuffixes:false});
// Exploit cookie
await cookiejar.setCookie(
  ""Slonser=polluted; Domain=__proto__; Path=/notauth"",
  ""https://__proto__/admin""
);
// normal cookie
var cookie = await cookiejar.setCookie(
  ""Auth=Lol; Domain=google.com; Path=/notauth"",
  ""https://google.com/""
);

//Exploit cookie
var a = {};
console.log(a[""/notauth""][""Slonser""])
}
main();
```

## Details

Prototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.

There are two main ways in which the pollution of prototypes occurs:

-   Unsafe `Object` recursive merge
    
-   Property definition by path
    

### Unsafe Object recursive merge

The logic of a vulnerable recursive merge function follows the following high-level model:
```
merge (target, source)

  foreach property of source

    if property exists and is an object on both the target and the source

      merge(target[property], source[property])

    else

      target[property] = source[property]
```
<br>  

When the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.

Clone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.

`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.

### Property definition by path

There are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`

If the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.

## Types of attacks

There are a few methods by which Prototype Pollution can be manipulated:

| Type |Origin  |Short description |
|--|--|--|
| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |
 |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|
|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|

## Affected environments

The following environments are susceptible to a Prototype Pollution attack:

-   Application server
    
-   Web server

-   Web browser
    

## How to prevent

1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.
    
2.  Require schema validation of JSON input.
    
3.  Avoid using unsafe recursive merge functions.
    
4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.
    
5.  As a best practice use `Map` instead of `Object`.

### For more information on this vulnerability type:

[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)

## Remediation
Upgrade `tough-cookie` to version 4.1.3 or higher.
## References
- [GitHub Commit](https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e)
- [GitHub Issue](https://github.com/salesforce/tough-cookie/issues/282)
- [GitHub Release](https://github.com/salesforce/tough-cookie/releases/tag/v4.1.3)
"
"xml2js","0.4.23","Proof of Concept","medium","CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N/E:P","2023-04-06T07:22:23.185949Z","[""<0.5.0""]","[""0.5.0""]","## Overview

Affected versions of this package are vulnerable to Prototype Pollution due to allowing an external attacker to edit or add new properties to an object. This is possible because the application does not properly validate incoming JSON keys, thus allowing the `__proto__` property to be edited.
## PoC
```js
var parseString = require('xml2js').parseString;

let normal_user_request    = ""<role>admin</role>"";
let malicious_user_request = ""<__proto__><role>admin</role></__proto__>"";

const update_user = (userProp) => {
    // A user cannot alter his role. This way we prevent privilege escalations.
    parseString(userProp, function (err, user) {
        if(user.hasOwnProperty(""role"") && user?.role.toLowerCase() === ""admin"") {
            console.log(""Unauthorized Action"");
        } else {
            console.log(user?.role[0]);
        }
    });
}

update_user(normal_user_request);
update_user(malicious_user_request);
```

## Details

Prototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `__proto__`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.

There are two main ways in which the pollution of prototypes occurs:

-   Unsafe `Object` recursive merge
    
-   Property definition by path
    

### Unsafe Object recursive merge

The logic of a vulnerable recursive merge function follows the following high-level model:
```
merge (target, source)

  foreach property of source

    if property exists and is an object on both the target and the source

      merge(target[property], source[property])

    else

      target[property] = source[property]
```
<br>  

When the source object contains a property named `__proto__` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.

Clone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.

`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.

### Property definition by path

There are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`

If the attacker can control the value of “path”, they can set this value to `__proto__.myValue`. `myValue` is then assigned to the prototype of the class of the object.

## Types of attacks

There are a few methods by which Prototype Pollution can be manipulated:

| Type |Origin  |Short description |
|--|--|--|
| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |
 |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|
|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|

## Affected environments

The following environments are susceptible to a Prototype Pollution attack:

-   Application server
    
-   Web server

-   Web browser
    

## How to prevent

1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.
    
2.  Require schema validation of JSON input.
    
3.  Avoid using unsafe recursive merge functions.
    
4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.
    
5.  As a best practice use `Map` instead of `Object`.

### For more information on this vulnerability type:

[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)

## Remediation
Upgrade `xml2js` to version 0.5.0 or higher.
## References
- [GitHub Commit](https://github.com/Leonidas-from-XIV/node-xml2js/commit/50a492aef9729b8b9b291c5cb2746ec7dc1369db)
- [GitHub Issue](https://github.com/Leonidas-from-XIV/node-xml2js/issues/593)
- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/603)
- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/674)
- [GitHub PR](https://github.com/Leonidas-from-XIV/node-xml2js/pull/681)
- [PoC](https://fluidattacks.com/advisories/myers/)
"